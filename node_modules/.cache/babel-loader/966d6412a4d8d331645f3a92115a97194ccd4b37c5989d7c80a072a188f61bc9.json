{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Generic request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || data.message || 'Something went wrong');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Doctor endpoints\n  async getDoctors(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/doctors?${queryString}`);\n  }\n  async getDoctor(id) {\n    return this.request(`/doctors/${id}`);\n  }\n  async getDoctorAvailability(id) {\n    return this.request(`/doctors/${id}/availability`);\n  }\n  async getDoctorAvailabilityByDate(id, date) {\n    return this.request(`/doctors/${id}/availability/${date}`);\n  }\n  async getSpecialties() {\n    return this.request('/doctors/specialties/list');\n  }\n\n  // Appointment endpoints\n  async createAppointment(appointmentData) {\n    return this.request('/appointments', {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n  async getAppointments(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/appointments?${queryString}`);\n  }\n  async getAppointment(id) {\n    return this.request(`/appointments/${id}`);\n  }\n  async updateAppointmentStatus(id, status, cancellationReason = null, cancelledBy = null) {\n    return this.request(`/appointments/${id}/status`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        status,\n        cancellationReason,\n        cancelledBy\n      })\n    });\n  }\n  async updateAppointment(id, appointmentData) {\n    return this.request(`/appointments/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n  async deleteAppointment(id) {\n    return this.request(`/appointments/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async getAppointmentStats() {\n    return this.request('/appointments/stats/overview');\n  }\n\n  // User endpoints\n  async register(userData) {\n    return this.request('/users/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/users/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getProfile() {\n    return this.request('/users/profile');\n  }\n  async updateProfile(profileData) {\n    return this.request('/users/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n  async changePassword(passwordData) {\n    return this.request('/users/change-password', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData)\n    });\n  }\n  async getUserAppointments() {\n    return this.request('/users/appointments');\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","token","localStorage","getItem","Authorization","response","fetch","data","json","ok","Error","error","message","console","getDoctors","params","queryString","URLSearchParams","toString","getDoctor","id","getDoctorAvailability","getDoctorAvailabilityByDate","date","getSpecialties","createAppointment","appointmentData","method","body","JSON","stringify","getAppointments","getAppointment","updateAppointmentStatus","status","cancellationReason","cancelledBy","updateAppointment","deleteAppointment","getAppointmentStats","register","userData","login","credentials","getProfile","updateProfile","profileData","changePassword","passwordData","getUserAppointments","healthCheck","apiService"],"sources":["C:/Users/HP/OneDrive/Desktop/Healthcare Appointment Booking Interface/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Generic request method\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || data.message || 'Something went wrong');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Doctor endpoints\r\n  async getDoctors(params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/doctors?${queryString}`);\r\n  }\r\n\r\n  async getDoctor(id) {\r\n    return this.request(`/doctors/${id}`);\r\n  }\r\n\r\n  async getDoctorAvailability(id) {\r\n    return this.request(`/doctors/${id}/availability`);\r\n  }\r\n\r\n  async getDoctorAvailabilityByDate(id, date) {\r\n    return this.request(`/doctors/${id}/availability/${date}`);\r\n  }\r\n\r\n  async getSpecialties() {\r\n    return this.request('/doctors/specialties/list');\r\n  }\r\n\r\n  // Appointment endpoints\r\n  async createAppointment(appointmentData) {\r\n    return this.request('/appointments', {\r\n      method: 'POST',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n\r\n  async getAppointments(params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/appointments?${queryString}`);\r\n  }\r\n\r\n  async getAppointment(id) {\r\n    return this.request(`/appointments/${id}`);\r\n  }\r\n\r\n  async updateAppointmentStatus(id, status, cancellationReason = null, cancelledBy = null) {\r\n    return this.request(`/appointments/${id}/status`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({ status, cancellationReason, cancelledBy }),\r\n    });\r\n  }\r\n\r\n  async updateAppointment(id, appointmentData) {\r\n    return this.request(`/appointments/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n\r\n  async deleteAppointment(id) {\r\n    return this.request(`/appointments/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async getAppointmentStats() {\r\n    return this.request('/appointments/stats/overview');\r\n  }\r\n\r\n  // User endpoints\r\n  async register(userData) {\r\n    return this.request('/users/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/users/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  }\r\n\r\n  async getProfile() {\r\n    return this.request('/users/profile');\r\n  }\r\n\r\n  async updateProfile(profileData) {\r\n    return this.request('/users/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n\r\n  async changePassword(passwordData) {\r\n    return this.request('/users/change-password', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(passwordData),\r\n    });\r\n  }\r\n\r\n  async getUserAppointments() {\r\n    return this.request('/users/appointments');\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst apiService = new ApiService();\r\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}